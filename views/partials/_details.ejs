<section class="classroom-details">
  <h3>Classroom Details</h3>
  <div class="seat-available">
    <h4>Seat Available</h4>

    <div class="seat-analytics total-seats" id="seat-analytics">
      <p id="total-seats">Total seat: 65</p>
      <p id="remaining-seat">
        <span class="box remaining-seat"></span>
        Available seat: 60
      </p>

      <p id="booked-seat">
        <span class="box booked"></span>
        Booked Seat : 6
      </p>
      <p id="selected-seat">
        <span class="box selected-seat"></span>
        Selected Seat :1
      </p>
    </div>

    <div class="calender">
      <p id="current-month-year"></p>
      <div class="calender-container">
        <div class="d-flex weekday-container">
          <div class="c-btn weekday">Su</div>
          <div class="c-btn weekday">Mo</div>
          <div class="c-btn weekday">Tu</div>
          <div class="c-btn weekday">We</div>
          <div class="c-btn weekday">Th</div>
          <div class="c-btn weekday">Fr</div>
          <div class="c-btn weekday">Sa</div>
        </div>
        <div class="d-flex-c date-container" id="date-container"></div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", initPage);
  let selectedDate = null;

  // define month array
  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  // curent date properties
  function getCurrentMonthYear() {
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth();
    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
    const firstDay = new Date(currentYear, currentMonth, 1).getDay();

    return { currentDate, firstDay, daysInMonth, currentMonth, currentYear };
  }

  // create empty divs

  function createDiv(classes = []) {
    const div = document.createElement("div");
    div.classList.add(...classes);
    return div;
  }
  // attach empty divs when days start doesn't start from sunday
  function createEmptyDays(row, firstDay, fragment) {
    for (let i = 0; i < firstDay; i++) {
      const emptyDiv = createDiv(["c-btn", "empty-date"]);
      row.appendChild(emptyDiv);
    }
    fragment.appendChild(row);
  }

  // initialize page and get necessary reference of elements
  function initPage() {
    // get reference for dom elements
    const dateContainer = document.getElementById("date-container");
    const monthYearDisplay = document.getElementById("current-month-year");
    // get date properties
    const { currentDate, firstDay, daysInMonth, currentMonth, currentYear } =
      getCurrentMonthYear();

    // Update month and year display
    monthYearDisplay.textContent = `${monthNames[currentMonth]} ${currentYear}`;

    //  draw calender
    const fragment = drawCalendar(currentDate, firstDay, daysInMonth);
    dateContainer.innerHTML = "";
    dateContainer.appendChild(fragment);
    // for selecting and deselecting the date
    const dates = document.querySelectorAll(".date");
    const todayDate = document.querySelector(".date.selected-date");

    // format date
    let inputDate = calculateDateInput(currentYear, currentMonth, todayDate);
    // function to send socket event
    getAvailableSeat(inputDate);

    Array.from(dates).forEach((date) => {
      date.addEventListener("click", function (e) {
        selectDate(date, todayDate);
        inputDate = calculateDateInput(currentYear, currentMonth, date);
        // finction to send socket event
        getAvailableSeat(inputDate);
      });
    });
  }

  function calculateDateInput(currentYear, month, date) {
    const formattedMonth = (month + 1).toString().padStart(2, "0");
    const formattedDay = date.innerText.toString().padStart(2, "0");

    const inputDate = currentYear + "-" + formattedMonth + "-" + formattedDay;
    document.getElementById("dateInput").value = inputDate;
    return inputDate;
  }

  function drawCalendar(currentDate, firstDay, daysInMonth) {
    // using DocumentFragment to minimize reflows
    const fragment = document.createDocumentFragment();
    let currentRow = createDiv(["d-flex", "date-row"]);

    // Add empty divs for the days before the 1st of the month
    createEmptyDays(currentRow, firstDay, fragment);

    // Generate the actual days in the calendar
    for (let day = 1; day <= daysInMonth; day++) {
      const dayDiv = createDiv(["c-btn", "date"]);
      dayDiv.textContent = day;

      // Highlight the current day
      if (day === currentDate.getDate()) {
        dayDiv.classList.add("selected-date");
      }

      currentRow.appendChild(dayDiv);

      // If the row completes 7 days
      //   append the row and start a new one

      if ((firstDay + day) % 7 === 0) {
        fragment.appendChild(currentRow);
        currentRow = createDiv(["d-flex", "date-row"]);
      }
    }

    // Append the last row if it has remaining days
    if (currentRow.children.length > 0) {
      fragment.appendChild(currentRow);
    }

    return fragment;
  }

  function deselectDate(dateElement) {
    if (dateElement) {
      dateElement.classList.remove("selected-date");
    }
  }
  // Function to handle the selection of a date
  function selectDate(dateElement, todayDate) {
    deselectDate(selectedDate);
    deselectDate(todayDate, todayDate);

    dateElement.classList.add("selected-date");
    selectedDate = dateElement;
  }

  function updateSeatAnalysis(domElement, data) {
    domElement.children[0].innerText = `Total seat: ${data.socketData?.totalSeats}`;
    domElement.children[1].innerHTML = `<span class="box remaining-seat"></span>Available seat: ${data.socketData?.availableSeats}`;
    domElement.children[2].innerHTML = `<span class="box booked"></span>Booked Seat : ${
      data.socketData?.bookedSeats.length || 0
    }`;
    domElement.children[3].innerHTML = `<span class="box selected-seat"></span>Selected Seat : ${
      data.socketData?.selectedSeat || 0
    }`;
  }
</script>
